(function(root){"use strict";var css=".nanobar{width:100%;height:4px;z-index:9999;top:0}.bar{width:0;height:100%;transition:height .3s;background:#000}";function addCss(){var s=document.getElementById("nanobarcss");if(s===null){s=document.createElement("style");s.type="text/css";s.id="nanobarcss";document.head.insertBefore(s,document.head.firstChild);if(!s.styleSheet)return s.appendChild(document.createTextNode(css));s.styleSheet.cssText=css}}function addClass(el,cls){if(el.classList)el.classList.add(cls);else el.className+=" "+cls}function createBar(rm){var el=document.createElement("div"),width=0,here=0,on=0,bar={el:el,go:go};addClass(el,"bar");function move(){var dist=width-here;if(dist<.1&&dist>-.1){place(here);on=0;if(width===100){el.style.height=0;setTimeout(function(){rm(el)},300)}}else{place(width-dist/4);setTimeout(go,16)}}function place(num){width=num;el.style.width=width+"%"}function go(num){if(num>=0){here=num;if(!on){on=1;move()}}else if(on){move()}}return bar}function Nanobar(opts){opts=opts||{};var el=document.createElement("div"),applyGo,nanobar={el:el,go:function(p){applyGo(p);if(p===100){init()}}};function rm(child){el.removeChild(child)}function init(){var bar=createBar(rm);el.appendChild(bar.el);applyGo=bar.go}addCss();addClass(el,"nanobar");if(opts.id)el.id=opts.id;if(opts.classname)addClass(el,opts.classname);if(opts.target){el.style.position="relative";opts.target.insertBefore(el,opts.target.firstChild)}else{el.style.position="fixed";document.getElementsByTagName("body")[0].appendChild(el)}init();return nanobar}if(typeof exports==="object"){module.exports=Nanobar}else if(typeof define==="function"&&define.amd){define([],function(){return Nanobar})}else{root.Nanobar=Nanobar}})(this);
(function() {
    "use strict";

    try {
        var oHead = document.head || document.getElementsByTagName("head")[0];

        var JSONConfig = null;
        var disableCache = false;
        var enableLoader = false;
        var useAngularEvents = false;
        var verboseLog = false;
        var nanobar;
        var useIE11 = false;
        var key = {
            appID: "",
            appSecret: ""
        };

        var utc = function utc(now) {
            var datestring =
                now.toDateString() +
                " " +
                ("0" + now.getHours()).slice(-2) +
                ":" +
                ("0" + now.getMinutes()).slice(-2) +
                ":" +
                ("0" + now.getSeconds()).slice(-2);
            return datestring;
        };

        var log = new (function() {
            var VERBOSE = false;

            var _log = function _log(cat, message, level) {
                var colorLevel = {
                    info: "black",
                    debug: "blue",
                    success: "green",
                    warning: "orange",
                    error: "red"
                };
                if (useIE11) {
                    console.log(utc(new Date()) + " | RBW-SDK | " + "Loader     | " + "[" + cat + "] :: " + message);
                } else {
                    console.log(
                        "%c " + utc(new Date()) + " | RBW-SDK | " + "Loader     | " + "[" + cat + "] :: " + message,
                        "color:" + colorLevel[level]
                    );
                }
            };

            this.info = function info(cat, message) {
                _log(cat, message, "info");
            };

            this.error = function error(cat, message) {
                _log(cat, message, "error");
            };

            this.success = function success(cat, message) {
                _log(cat, message, "success");
            };

            this.warning = function warning(cat, message) {
                _log(cat, message, "warning");
            };

            this.debug = function debug(cat, message) {
                if (VERBOSE) {
                    _log(cat, message, "debug");
                }
            };

            this.setLevelToVerbose = function setLevelToVerbose(isVerbose) {
                VERBOSE = isVerbose;
            };
        })();

        var load = function load() {
            log.info("Initialize ", "Starting Rainbow SDK for Web loader...");
            log.info("Initialize ", "---------------------------------------------");
            log.info("Initialize ", "Try to load needed stuff...");

            return new Promise(function(resolve, reject) {
                function loadFile(file, async) {
                    log.debug("Loading    ", "Try to load script " + file);
                    return new Promise(function(resolve_loadFile, reject_loadFile) {
                        try {
                            var oScript = document.createElement("script");
                            oScript.type = "text/javascript";
                            oScript.async = async;
                            oScript.onerror = function(err) {
                                log.error("Loading    ", "Can't load script file " + file + "(loading-error)");
                                reject_loadFile(err);
                            };
                            oScript.onload = function() {
                                log.success("Loading    ", "Loaded script file " + file);
                                resolve_loadFile();
                            };
                            oHead.appendChild(oScript);

                            var url = file;

                            if (disableCache) {
                                url += "?cache=" + new Date().getTime();
                            }
                            oScript.src = url;
                        } catch (err) {
                            log.error("Loading    ", "Can't load script file " + file + " (loading-error)");
                            reject_loadFile(err);
                        }
                    });
                }

                function loadCSS(file, async) {
                    log.debug("Loading    ", "Try to load CSS " + file);
                    return new Promise(function(resolve_loadCss, reject_loadCss) {
                        try {
                            var oScript = document.createElement("link");
                            oScript.rel = "stylesheet";
                            oScript.type = "text/css";
                            oScript.async = async;
                            oScript.onerror = function(err) {
                                log.error("Loading    ", "Can't load css file " + file + " (loading-error)");
                                reject_loadCss(err);
                            };
                            oScript.onload = function() {
                                log.success("Loading    ", "Loaded css file " + file);
                                resolve_loadCss();
                            };
                            oHead.appendChild(oScript);
                            oScript.href = file;
                        } catch (err) {
                            log.error("Loading    ", "Error when loading css file (loading-error)");
                            reject_loadCss(err);
                        }
                    });
                }

                function loadConfig() {
                    return new Promise(function(resolve_loadConfig, reject_loadConfig) {
                        try {
                            var scripts = document.getElementsByTagName("script");
                            var configURL = null;

                            if (scripts) {
                                for (var i in scripts) {
                                    if ({}.hasOwnProperty.call(scripts, i)) {
                                        var script = scripts[i];
                                        if (script.dataset && script.dataset.main) {
                                            configURL = script.dataset.main;
                                            log.info("Loading    ", "Use config file " + configURL);
                                        }
                                    }
                                }
                            }

                            if (!configURL) {
                                log.error(
                                    "Loading    ",
                                    "Config file can't be found. Did you forget to add the data-main attribute (file-not-found) ?"
                                );
                                reject_loadConfig();
                            } else {
                                var oReq = new XMLHttpRequest();

                                oReq.onload = function(__event) {
                                    if (oReq.status !== 200) {
                                        log.error(
                                            "Loading    ",
                                            "Can't load the config file: " + oReq.status + " " + oReq.statusText + " (file-not-found)"
                                        );
                                        reject_loadConfig(oReq.statusText);
                                    } else {
                                        JSONConfig = oReq.response;
                                        log.info("Loading    ", "Received a config file of type... " + typeof JSONConfig);
                                        if (typeof JSONConfig === "string") {
                                            log.warning("Loading    ", "Convert data to JSON...");
                                            JSONConfig = JSON.parse(JSONConfig);
                                        }

                                        if (JSONConfig) {
                                            if (isConfigFileValid()) {
                                                log.success("Loading    ", "The config file is valid");
                                                resolve_loadConfig();
                                            } else {
                                                log.error("Loading    ", "No valid config file (no-valid-file)");
                                                reject_loadConfig();
                                            }
                                        } else {
                                            log.error("Loading    ", "No valid config file (no-valid-file)");
                                            reject_loadConfig();
                                        }
                                    }
                                };
                                oReq.onerror = function(err) {
                                    reject_loadConfig(err);
                                };

                                oReq.open("GET", configURL, true);
                                oReq.responseType = "json";
                                log.info("Loading    ", "Load config file " + configURL);
                                oReq.send();
                            }
                        } catch (err) {
                            log.info("Loading    ", "Error when loading the config file (error-loading)");
                            console.log("ERR", err);
                            reject_loadConfig(err);
                        }
                    });
                }

                function loadScripts(files, async, isScript) {
                    return new Promise(function(resolve_loadScripts, reject_loadScripts) {
                        try {
                            var libsToLoad = files.length;
                            var loaded = 0;
                            var errLoaded = 0;

                            if (libsToLoad === 0) {
                                log.debug("Loading    ", "Nothing to load. Go to next step!");
                                resolve_loadScripts();
                            } else {
                                log.debug("Loading    ", "Preparing for loading " + libsToLoad + " files...");
                                files.forEach(function(file) {
                                    if (isScript) {
                                        loadFile(file, async)
                                            .then(function() {
                                                loaded++;
                                                log.debug("Loading    ", loaded + " file(s) loaded");
                                                if (libsToLoad === loaded) {
                                                    resolve_loadScripts();
                                                } else {
                                                    if (libsToLoad === loaded + errLoaded) {
                                                        reject_loadScripts();
                                                    }
                                                }
                                            })
                                            .catch(function(err) {
                                                errLoaded++;
                                                log.error("Loading    ", errLoaded + " file(s) not loaded");
                                                if (libsToLoad === loaded + errLoaded) {
                                                    reject_loadScripts(err);
                                                }
                                            });
                                    } else {
                                        loadCSS(file, async)
                                            .then(function() {
                                                loaded++;
                                                log.debug("Loading    ", loaded + " file(s) loaded");
                                                if (libsToLoad === loaded) {
                                                    resolve_loadScripts();
                                                } else {
                                                    if (libsToLoad === loaded + errLoaded) {
                                                        reject_loadScripts();
                                                    }
                                                }
                                            })
                                            .catch(function(err) {
                                                errLoaded++;
                                                log.error("Loading    ", errLoaded + " file(s) not loaded");
                                                if (libsToLoad === loaded + errLoaded) {
                                                    reject_loadScripts(err);
                                                }
                                            });
                                    }
                                });
                            }
                        } catch (err) {
                            reject_loadScripts(err);
                        }
                    });
                }

                function bootstrap(name) {
                    return new Promise(function(resolve_bootstrap, reject_bootstrap) {
                        try {
                            angular.bootstrap(document, [name]);
                            resolve_bootstrap();
                        } catch (err) {
                            reject_bootstrap(err);
                        }
                    });
                }

                function setParameters() {
                    return new Promise(function(resolve_setParameters, __reject_setParameters) {
                        var settings = JSONConfig.settings;

                        // Logs
                        if (typeof settings.verboseLog === "undefined") {
                            log.warning("Config     ", "Missing 'verboseLog' property in config file. Use default (no-verbose-log)");
                            log.setLevelToVerbose(false);
                            verboseLog = false;
                        } else {
                            verboseLog = settings.verboseLog;
                            var res = verboseLog ? "YES" : "NO";
                            log.info("Config     ", "Set verbose log " + res);
                            log.setLevelToVerbose(verboseLog);
                        }
                        // force Reload
                        if (typeof settings.disableCache === "undefined") {
                            log.warning("Config     ", "Missing 'disableCache' property in config file. Use default (use-cache)");
                            disableCache = false;
                        } else {
                            disableCache = settings.disableCache;
                            var res = disableCache ? "YES" : "NO";
                            log.info("Config     ", "Force to reload script " + res);
                        }
                        //Loader
                        if (typeof settings.enableLoader === "undefined") {
                            log.warning("Config     ", "Missing 'enableLoader' property in config file. Use default (no-loader)");
                            enableLoader = false;
                        } else {
                            enableLoader = settings.enableLoader;
                            var res = enableLoader ? "YES" : "NO";
                            log.info("Config     ", "Display loader " + res);
                        }
                        //Loader
                        if (typeof settings.useAngularEvents === "undefined") {
                            log.warning("Config     ", "Missing 'useAngularEvents' property in config file. Use default (no-angular-events)");
                            useAngularEvents = false;
                        } else {
                            useAngularEvents = settings.useAngularEvents;
                            var res = useAngularEvents ? "YES" : "NO";
                            log.info("Config     ", "Use Angular based events " + res);
                        }
                        resolve_setParameters();
                    });
                }

                function readKey() {
                    return new Promise(function(resolve_readkey, __reject_readkey) {
                        var app = JSONConfig.app;

                        //Loader
                        if (app.key.appID.length === 0) {
                            log.warning("Config     ", "Empty property 'appID' in config file. Use default (no-appID)");
                        } else {
                            key.appID = app.key.appID;
                            key.appSecret = app.key.appSecret;
                            log.info("Config     ", "Use Application ID " + key.appID);
                        }
                        resolve_readkey();
                    });
                }

                function initSDK() {
                    return new Promise(function(resolve_init, reject_init) {
                        if (window.rainbowSDK) {
                            log.info("Information", "Global window.rainbowSDK variable set");
                            window.rainbowSDK.setVerboseLog(verboseLog);
                            window.rainbowSDK.useAngularEvents(useAngularEvents);
                            window.rainbowSDK.setKeyFromConfig(key.appID, key.appSecret);
                            window.rainbowSDK.hasBeenLaunchedFromConfig(true);
                            resolve_init();
                        } else {
                            log.warning("No global parameter rainbowSDK (no-global)");
                            reject_init();
                        }
                    });
                }

                function isConfigFileValid() {
                    if (!JSONConfig.hasOwnProperty("settings")) {
                        log.error("Config     ", "Missing property 'settings' in config file. (incomplete-file)");
                        return false;
                    }
                    if (!JSONConfig.hasOwnProperty("libraries")) {
                        log.error("Config     ", "Missing property 'libraries' in config file. (incomplete-file)");
                        return false;
                    }
                    if (!JSONConfig.libraries.hasOwnProperty("prerequisites")) {
                        log.error("Config     ", "Missing property 'before' in config file. (incomplete-file)");
                        return false;
                    }
                    if (!JSONConfig.libraries.hasOwnProperty("sdk")) {
                        log.error("Config     ", "Missing property 'sdk' in config file. (incomplete-file)");
                        return false;
                    }
                    if (!JSONConfig.libraries.sdk.hasOwnProperty("default")) {
                        log.error("Config     ", "Missing property 'default' in config file. (incomplete-file)");
                        return false;
                    }
                    if (!JSONConfig.hasOwnProperty("app")) {
                        log.error("Config     ", "Missing property 'app' in config file. (incomplete-file)");
                        return false;
                    }
                    if (!JSONConfig.app.hasOwnProperty("key")) {
                        log.error("Config     ", "Missing property 'key' in config file. (incomplete-file)");
                        return false;
                    }
                    if (!JSONConfig.app.key.hasOwnProperty("appID")) {
                        log.error("Config     ", "Missing property 'appID' in config file. (incomplete-file)");
                        return false;
                    }
                    if (!JSONConfig.app.key.hasOwnProperty("appSecret")) {
                        log.error("Config     ", "Missing property 'appSecret' in config file. (incomplete-file)");
                        return false;
                    }

                    var sdkName = JSONConfig.libraries.sdk.default;
                    if (!(sdkName in JSONConfig.libraries.sdk)) {
                        log.error("Config     ", "Missing property '" + sdkName + "' in config file. (incomplete-file)");
                        return false;
                    }
                    return true;
                }

                function loadPrerequisites() {
                    log.debug("Loading    ", "Preparing for loading pre-dependencies...");
                    return loadScripts(JSONConfig.libraries.prerequisites, false, true);
                }

                function loadSDK() {
                    log.debug("Loading    ", "Preparing for loading framework...");
                    var sdkToLoad = JSONConfig.libraries.sdk.default;
                    var files = JSONConfig.libraries.sdk[sdkToLoad];
                    return loadScripts(files, true, true);
                }

                function loadAfter() {
                    log.debug("Loading    ", "Preparing for loading post-dependencies...");
                    return loadScripts(JSONConfig.libraries.after, true, true);
                }

                function loadAppCSS() {
                    log.debug("Loading    ", "Preparing for loading application CSS...");
                    return loadScripts(JSONConfig.app.css, true, false);
                }

                function loadAppScripts() {
                    log.debug("Loading    ", "Preparing for loading application files...");
                    return loadScripts(JSONConfig.app.js, false, true);
                }

                function bootstrapApp() {
                    log.debug("Loading    ", "Preparing for bootstrapping application...");
                    return bootstrap(JSONConfig.app.bootstrap);
                }

                function initializeSDK() {
                    log.debug("Loading    ", "Preparing initializing SDK...");
                    return initSDK();
                }

                function readApplicationKey() {
                    log.debug("Loading    ", "Preparing reading application key...");
                    return readKey();
                }

                function startLoader() {
                    if (enableLoader) {
                        nanobar = new Nanobar();
                        nanobar.go(1);
                    }
                }

                function updateLoader(val) {
                    if (enableLoader && nanobar) {
                        nanobar.go(val);
                    }
                }

                loadConfig()
                    .then(function() {
                        return setParameters();
                    })
                    .then(function() {
                        startLoader();
                        log.debug("Information", "Config loaded successfully");
                        log.debug("Information", "Parameters set");
                        updateLoader(10);
                        return readApplicationKey();
                    })
                    .then(function() {
                        log.debug("Information", "Finished reading application key");
                        updateLoader(20);
                        return loadPrerequisites();
                    })
                    .then(function() {
                        log.debug("Information", "Finished loading pre-dependencies");
                        updateLoader(30);
                        return loadSDK();
                    })
                    .then(function() {
                        log.debug("Information", "Finished loading framework");
                        updateLoader(45);
                        return loadAfter();
                    })
                    .then(function() {
                        log.debug("Information", "Finished loading post-dependencies");
                        updateLoader(60);
                        return loadAppCSS();
                    })
                    .then(function() {
                        log.debug("Information", "Finished loading application CSS");
                        updateLoader(75);
                        return loadAppScripts();
                    })
                    .then(function() {
                        log.debug("Information", "Finished loading application");
                        updateLoader(90);
                        return bootstrapApp();
                    })
                    .then(function() {
                        log.debug("Information", "Finished bootstraping application");
                        updateLoader(95);
                        return initializeSDK();
                    })
                    .then(function() {
                        log.debug("Information", "Finished initializing SDK");
                        log.info("Initialize ", "---------------------------------------------");
                        updateLoader(100);
                        resolve();
                    })
                    .catch(function(err) {
                        log.info("Initialize ", "---------------------------------------------");
                        reject(err);
                    });
            });
        };

        if (navigator.appName === "Microsoft Internet Explorer" || !!(navigator.userAgent.match(/Trident/) || navigator.userAgent.match(/rv 11/))) {
            window.Promise = window.ES6Promise;
            useIE11 = true;
            log.warning("Initialize ", "Internet Explorer 11 detected. You need to load ES6-shim in order to work (IE11-compat)");
        }

        load()
            .then(function() {
                log.info("Initialize ", "Loaded!");
                window.rainbowSDK.load();
            })
            .catch(function(err) {
                log.warning("Initialize ", "Something goes wrong!!! Please have a look to the logs.");
                var errorTxt = err.message ? err.message : "unknown error";
                errorTxt += err.stack ? " | stack: " + err.stack : "";
                log.warning("Initialize ", errorTxt);
            });
    } catch (err) {
        console.log("If you see that... Just go away from that code :-)", err);
    }
})();
